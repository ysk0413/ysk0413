以下は、シフト作成アプリケーションの開発に向けた完全なプロンプトです。他の生成AIが正確に解釈できるよう、構造化・簡潔化してまとめました。

---

### プロンプト：シフト自動作成Webアプリ開発要件
#### 1. アプリの目的
Excelライクな操作で、複雑なルールに基づく公平なシフト表を自動作成するツール。  
最適化アルゴリズムで「ルール順守」と「バランスの良さ」を両立させる。

---

#### 2. 必須ルール（厳守条件）
##### 基本設定
| 項目 | 値 |
|------|----|
| 勤務形態 | `出社` / `在宅` / `休み` |
| 週間勤務日数 | `A・C:5日`、`B・D:4日` |
| 最大出社日数/週 | `A・B・D:2日`、`C:出勤日以外で0~2日` |

##### 絶対条件
- ✅ 毎日最低1人は`出社`  
- ✅ Cの`出勤`日は他のメンバー1人が必ず出社（Cの出社カウント対象外）  
- ✅ 月末近くの平日（例:25日）は全員出社日  

---

#### 3. バランス評価基準（最適化指標）
##### 優先順位
1. 出社日数の均等化  
   - メンバー間の出社日数差を最小化  
   - 例: Aが週2日、Bが週1日 → 差1日（理想は差0）  

2. 休みの分散  
   - 連続休みを防ぐ（例: Bの休みを`月・水・土`に分散）  

3. 出社負荷の軽減  
   - 同一人物が連続出社しない  
   - 休日（土日）の出社を最小化  

4. 月末ルールの遵守  
   - 25日付近で全員出社を確保  

---

#### 4. ユーザーインターフェース要件
##### 入力画面
- Excelライクなグリッド  
  - 日付・曜日・A/B/C/Dの勤務形態を選択可能  
  - コピペ対応（Excelからの貼り付け可）  
- カラーコーディング  
  - `出社:緑` / `在宅:青` / `休み:灰` / `警告:赤`  

##### 設定パネル
```javascript
// ユーザーが変更可能なルール例
const rules = {
  workDays: { A:5, B:4, C:5, D:4 }, // 週の勤務日数
  maxOfficeDays: { A:2, B:2, C:2, D:2 }, // 最大出社日数
  mustOfficeDaily: true, // 毎日1人以上出社
  endOfMonthAllOffice: true // 月末全員出社
};
```

##### 操作機能
- 最適化ボタン: アルゴリズム実行  
- リセットボタン: 初期状態に戻す  

---

#### 5. 最適化アルゴリズム仕様
##### 手法選択
- 遺伝的アルゴリズム（GA）  
  - 評価関数: `ルール違反ペナルティ + バランススコア`  
  - 世代数: 10,000回  

##### 評価関数の計算式
| 項目 | 計算式 |
|------|--------|
| 出社均等度 | `1 - (max出社日数 - min出社日数) / 総週数` |
| 休み分散度 | `1 / (連続休み日数 + 1)` |
| ルール違反 | `必須条件違反で+100ペナルティ` |

##### 処理フロー
```mermaid
graph TD
  A[ランダムな初期シフト生成] --> B{ルールチェック}
  B -->|違反| C[修正]
  B -->|OK| D[スコア計算]
  D --> E[トップ10個体を選択]
  E --> F[交叉・突然変異]
  F --> G[次世代生成]
  G --> H[最大10,000回繰り返し]
  H --> I[最良解を出力]
```

---

#### 6. 出力例（成功ケース）
| 日付 | 曜日 | A    | B    | C      | D    |
|------|------|------|------|--------|------|
| 1    | 日   | 休   | 休   | 出社   | 休   |
| 2    | 月   | 出社 | 在宅 | 出勤   | 在宅 |
| 3    | 火   | 在宅 | 出社 | 特休   | 休   |
| ...  | ...  | ...  | ...  | ...    | ...  |
| 25   | 水   | 出社 | 出社 | 出社   | 出社 |

---

#### 7. 開発技術の提案
- フロントエンド: React + TypeScript  
  - ライブラリ: `react-grid-layout`（グリッド操作）  
- 最適化エンジン: GeneticJS  
- UIコンポーネント: Material-UI  

---

このプロンプトを他の生成AIに渡せば、正確なシフト自動作成アプリの開発が可能です。  
必要に応じて「評価基準の重み付け」や「入力方法の詳細」を追加してください。
